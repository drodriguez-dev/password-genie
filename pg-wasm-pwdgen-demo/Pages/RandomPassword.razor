@page "/password/random"
@using PG.Logic.Passwords.Generators
@using PG.Logic.Passwords.Generators.Entities
@inject PG.Logic.Passwords.Generators.PasswordGeneratorFactory PasswordFactory

<PageTitle>Password Genie</PageTitle>

<h1>Password <span class="text-warning">Genie</span>rator</h1>

@if (!string.IsNullOrEmpty(lastPassword))
{
	<p role="status">Password: @lastPassword</p>
}

<button class="btn btn-primary" @onclick="CreatePassword">New Password</button>

@code {
	private string lastPassword = string.Empty;

	[Parameter]
	public int IncrementAmount { get; set; } = 1;

	protected override void OnInitialized()
	{
		CreatePassword();
	}

	private void CreatePassword()
	{
		if (PasswordFactory is null)
			throw new InvalidOperationException("PasswordGeneratorFactory is not initialized.");

		var options = new RandomPasswordGeneratorOptions()
			{
				NumberOfPasswords = 1,
				NumberOfLetters = 8,
				NumberOfNumbers = 2,
				NumberOfSpecialCharacters = 1,
				CustomSpecialCharacters = @"!@#$%&*()_+{}:?[]-='".ToCharArray(),
			};

		var generator = PasswordFactory.Create(GeneratorType.Random, options);

		lastPassword = generator.Generate().Split(Environment.NewLine, StringSplitOptions.RemoveEmptyEntries)[0];
	}
}
