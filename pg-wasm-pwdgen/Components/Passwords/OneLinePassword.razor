@using PG.Logic.Passwords.Generators
@using PG.Logic.Passwords.Generators.Entities

@code {
	[Parameter]
	public PasswordResult? Password { get; set; }
}

@if (Password != null)
{
	<div class="row">
		<div class="col-12">
			<span class="password">@Password.Password</span>
		</div>
	</div>

	<div class="row">
		<div class="col-12">
			<Tooltip Placement="TooltipPlacement.Left" Title="Entropy is a measure of the randomness of the password, indicating how unpredictable it is.">
				<h4>Entropy</h4>
			</Tooltip>
		</div>
	</div>

	<div class="row">
		<div class="col-12">
			<Tooltip Placement="TooltipPlacement.Left" Title="True entropy is calculated based on the number of possible combinations occurred during the password generation.">
				<p role="note" class="text-muted"><strong>True:</strong> @TrueEntropyText</p>
			</Tooltip>
			<Tooltip Placement="TooltipPlacement.Left" Title="Derived entropy is calculated based on the generated password, based on the different types of characters and the password length.">
				<p role="note" class="text-muted"><strong>Derived:</strong> @DerivedEntropyText</p>
			</Tooltip>
		</div>
	</div>
}

@code {
	private string TrueEntropyText { get => GenerateEntropyDescription(Password?.TrueEntropy); }
	private string DerivedEntropyText { get => GenerateEntropyDescription(Password?.DerivedEntropy); }

	private string GenerateEntropyDescription(double? entropy) =>
		entropy.HasValue ? $"{entropy:F2} bits ({GetEntropyStrengthText(entropy.Value)})" : string.Empty;

	private string GetEntropyStrengthText(double entropy)
	{
		var strength = PasswordGeneratorBase.CalculateStrength(entropy);
		return GetEntropyStrengthText(strength);
	}

	private string GetEntropyStrengthText(PasswordStrength strength)
	{
		return strength switch
		{
			PasswordStrength.VeryWeak => "Very weak",
			PasswordStrength.Weak => "Weak",
			PasswordStrength.Reasonable => "Medium",
			PasswordStrength.Strong => "Strong",
			PasswordStrength.VeryStrong => "Very strong",
			_ => "Unknown",
		};
	}
}