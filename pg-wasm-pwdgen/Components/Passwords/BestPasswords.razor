@using BlazorBootstrap
@using PG.Logic.Passwords.Generators
@using PG.Logic.Passwords.Generators.Entities
@using PG.Wasm.PasswordGenerator.Components.Passwords.Models
@inject IJSRuntime JSRuntime

@code {
	[Parameter]
	public int MaxPasswords { get; set; } = 7;
}

<Toasts class="p-3" Messages="messages" AutoHide="true" Delay="1500" Placement="ToastsPlacement.TopRight" />

@if (lastPassword != null)
{
	<Card Style="width:25rem">
		<CardHeader Class="px-2 py-2">
			<OneLinePassword Password="@lastPassword" Size="PasswordSize.Large" />
		</CardHeader>

		<CardBody Class="px-2 py-1">
			<ul class="list-group list-group-flush m-0 p-0">
				@foreach (var password in passwords)
				{
					<li class="list-group-item p-0">
						<div class="row m-0">
							<div class="col p-0" style="width:auto">
								<OneLinePassword Password="@password" Size="PasswordSize.Medium" />
							</div>
							<div class="fixed align-self-center" style="width: auto">
								<Button Color="ButtonColor.Secondary" @onclick="() => CopyToClipboard(password.Password)"><Icon Name="IconName.Clipboard2CheckFill" /></Button>
								<Button Color="ButtonColor.Danger" @onclick="() => RemovePassword(password)"><Icon Name="IconName.TrashFill" /></Button>
							</div>
						</div>
					</li>
				}
			</ul>
		</CardBody>

		<CardFooter>
			<Button Color="ButtonColor.Primary" @onclick="ClearPasswords"><Icon Name="IconName.XLg" Class="me-1"/>Clear</Button>
		</CardFooter>
	</Card>
}

@code {
	private List<ToastMessage> messages = new List<ToastMessage>();

	private PasswordResult? lastPassword = null;
	private List<PasswordResult> passwords = new List<PasswordResult>();

	private void ClearPasswords(MouseEventArgs args)
	{
		Clear();
	}

	private async Task CopyToClipboard(string text)
	{
		await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text);
		ShowMessage(ToastType.Primary, "Password copied to clipboard.");
	}

	private void ShowMessage(ToastType toastType, string message) => messages.Add(CreateToastMessage(toastType, message));

	private ToastMessage CreateToastMessage(ToastType toastType, string message)
	{
		return new ToastMessage
			{
				Type = toastType,
				AutoHide = !new[] { ToastType.Danger, ToastType.Warning }.Contains(toastType),
				Message = message,
			};
	}

	#region Public methods
	public void Add(PasswordResult password)
	{
		if (lastPassword != null)
			passwords.Add(lastPassword);

		lastPassword = password;

		passwords = passwords
				.OrderByDescending(p => GetSortingScore(p.TrueEntropy, p.DerivedEntropy))
				.ToList();

		if (passwords.Count > MaxPasswords)
			passwords.RemoveAt(passwords.Count - 1);

		StateHasChanged();

		int GetSortingScore(double trueEntropy, double derivedEntropy)
		{
			var level = (int)PasswordGeneratorBase.CalculateStrength(trueEntropy);
			level += (int)PasswordGeneratorBase.CalculateStrength(derivedEntropy);
			return level;
		}
	}

	private void RemovePassword(PasswordResult password)
	{
		passwords.Remove(password);
		StateHasChanged();
	}

	public void Clear()
	{
		lastPassword = null;
		passwords.Clear();
		StateHasChanged();
	}
	#endregion
}