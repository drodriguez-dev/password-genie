@using BlazorBootstrap
@using PG.Logic.Passwords.Generators
@using PG.Logic.Passwords.Generators.Entities
@using PG.Wasm.PasswordGenerator.Components.Passwords.Models
@inject IJSRuntime JSRuntime

@code {
	[Parameter]
	public int MaxPasswords { get; set; } = 7;
}

@if (lastPassword != null)
{
	<div class="container-fluid p-0">
		<div class="row g-0">
			<Card Class="col">
				<CardHeader Class="p-2">
					<OneLinePassword Password="@lastPassword" Size="PasswordSize.Large" />
				</CardHeader>

				@if (passwords.Count > 0)
				{
					<CardBody Class="px-2 py-1">
						<ul class="list-group list-group-flush m-0 px-1">
							@foreach (var password in passwords)
							{
								<li class="list-group-item p-0">
									<div class="container-fluid p-0">
										<div class="row g-2 flex-nowrap">
											<div class="col align-self-center flex-grow-1 flex-shrink-1 px-0 py-0" style="min-width: 0;">
												<OneLinePassword Password="@password" Size="PasswordSize.Medium" />
											</div>
											<div class="col-auto" style="width: auto">
												<Button Color="ButtonColor.Danger" @onclick="() => RemovePassword(password)"><Icon Name="IconName.TrashFill" /></Button>
											</div>
										</div>
									</div>
								</li>
							}
						</ul>
					</CardBody>
				}

				<CardFooter>
					<Button Color="ButtonColor.Primary" @onclick="ClearPasswords"><Icon Name="IconName.XLg" Class="me-1" />Clear</Button>
				</CardFooter>
			</Card>
		</div>
	</div>
}

@code {
	private PasswordResult? lastPassword = null;
	private List<PasswordResult> passwords = new List<PasswordResult>();

	private void ClearPasswords(MouseEventArgs args)
	{
		Clear();
	}

	#region Public methods
	public void Add(PasswordResult password)
	{
		if (lastPassword != null)
			passwords.Add(lastPassword);

		lastPassword = password;

		passwords = passwords
			.OrderByDescending(p => GetSortingScore(p.TrueEntropy, p.DerivedEntropy))
			.ThenByDescending(p => (p.TrueEntropy + p.DerivedEntropy) / 2)
			.ToList();

		if (passwords.Count > MaxPasswords)
			passwords.RemoveAt(passwords.Count - 1);

		StateHasChanged();

		int GetSortingScore(double trueEntropy, double derivedEntropy)
		{
			var level = (int)PasswordGeneratorBase.CalculateStrength(trueEntropy);
			level += (int)PasswordGeneratorBase.CalculateStrength(derivedEntropy);
			return level;
		}
	}

	private void RemovePassword(PasswordResult password)
	{
		passwords.Remove(password);
		StateHasChanged();
	}

	public void Clear()
	{
		lastPassword = null;
		passwords.Clear();
		StateHasChanged();
	}
	#endregion
}