@page "/password/dictionary"
@using PG.Entities.Files
@using PG.Logic.Passwords.Generators
@using PG.Logic.Passwords.Generators.Entities
@using PG.Wasm.PasswordGenerator.Components.Passwords
@using PG.Wasm.PasswordGenerator.Components.Passwords.Models
@inject NavigationManager Navigation
@inject PG.Logic.Passwords.Generators.PasswordGeneratorFactory PasswordFactory
@inject IJSRuntime JSRuntime

<Toasts class="p-3" Messages="messages" AutoHide="true" Delay="1500" Placement="ToastsPlacement.TopRight" />

<div class="container-md">
	<div class="row">
		<div class="col">
			<h2>Dictionary based password generator</h2>
		</div>
	</div>

	<div class="row g-1 mb-3">
		<div class="col-4 align-items-center">
			<Dropdown Color="DropdownColor.Secondary" Direction="DropdownDirection.Dropend">
				<DropdownToggleButton>Dictionary</DropdownToggleButton>
				<DropdownMenu>
					<DropdownItem Type="DropdownItemType.Button" Active='@(SelectedLanguage == "en-US")' Disabled='@(SelectedLanguage == "en-US")'
												@onclick='() => SelectLanguage("en-US")'>English (en-US)</DropdownItem>
					<DropdownItem Type="DropdownItemType.Button" Active='@(SelectedLanguage == "es-ES")' Disabled='@(SelectedLanguage == "es-ES")'
												@onclick='() => SelectLanguage("es-ES")'>Spanish (es-ES)</DropdownItem>
				</DropdownMenu>
			</Dropdown>
		</div>

		<div class="col-8 align-items-center">
			@if (string.IsNullOrWhiteSpace(SelectedLanguage))
			{
				<span role="note" class="text-muted">Select the language for the dictionary.</span>
			}
			else if (IsGeneratorAvailable)
			{
				<span role="note">Language: @(SelectedLanguage)</span>
			}
		</div>
	</div>

	<div class="row g-1 mb-3">
		<div class="col text-nowrap">
			<Button Color="ButtonColor.Primary" Disabled='@(!IsGeneratorAvailable)' @onclick="GenerateNewPassword">
				<Icon Name="IconName.BracesAsterisk" Class="me-1" />Generate new password
			</Button>
			<Button Color="ButtonColor.Primary" Disabled='@(!IsGeneratorAvailable)' @onclick="GenerateMultiplePasswords">x@(maxPasswordsCount + 1)</Button>
		</div>
	</div>

	<div class="row mb-3">
		<div class="col">
			<Accordion>
				<AccordionItem>
					<TitleTemplate>
						<Icon Name="IconName.Gear" Class="me-1" />Configuration
					</TitleTemplate>
					<Content>
						<DictionaryGeneratorOptions @ref="optionsForm" Options="@Options" />
					</Content>
				</AccordionItem>
			</Accordion>
		</div>
	</div>

	<div class="row mb-3">
		<div class="col">
			<BestPasswords @ref="bestPasswordsComponent" MaxPasswords="@(maxPasswordsCount)" />
		</div>
	</div>
</div>

@code {
	private Uri? _baseUri;
	private IPasswordGenerator? _generator = null;
	private static readonly int maxPasswordsCount = 7;

	private DictionaryGeneratorOptions? optionsForm;
	private PasswordOptions options = new PasswordOptions();
	private PasswordOptions Options { get => options; set { options = value; StateHasChanged(); } }

	[Inject]
	protected PreloadService PreloadService { get; set; } = default!;

	private string selectedLanguage = string.Empty;
	private string SelectedLanguage { get => selectedLanguage; set { selectedLanguage = value; StateHasChanged(); } }

	private bool IsGeneratorAvailable => _generator is not null && !string.IsNullOrWhiteSpace(SelectedLanguage);

	private BestPasswords? bestPasswordsComponent;

	private List<ToastMessage> messages = new List<ToastMessage>();

	protected override void OnInitialized()
	{
		if (PasswordFactory is null)
			throw new InvalidOperationException("Password generator factory is not initialized.");

		_baseUri = new Uri(Navigation.BaseUri);
	}

	private void ShowMessage(ToastType toastType, string message) => messages.Add(CreateToastMessage(toastType, message));

	private async Task ShowException(Exception ex)
	{
		await JSRuntime.InvokeVoidAsync("console.error", ex.ToString());

		ShowMessage(ToastType.Danger, ex.Message);
	}

	private ToastMessage CreateToastMessage(ToastType toastType, string message)
	{
		return new ToastMessage
			{
				Type = toastType,
				AutoHide = !(new[] { ToastType.Danger, ToastType.Warning }.Contains(toastType)),
				Message = message,
			};
	}

	private async Task<Stream> GetWordTreeFile(string language)
	{
		if (_baseUri is null)
			throw new InvalidOperationException("Base URI not initialized");

		Uri? wordTreePath = default;
		try
		{
			string relativePath = language switch
			{
				"es-ES" => "data/word_tree_esES.dat.gz",
				"en-US" => "data/word_tree_enUS.dat.gz",
				_ => throw new InvalidOperationException($"Unsupported language: \"{language}\""),
			};

			return await new HttpClient().GetStreamAsync(new Uri(_baseUri, relativePath));
		}
		catch (Exception ex)
		{
			throw new InvalidOperationException($"Error loading dictionary file: \"{wordTreePath?.ToString()}\"", ex);
		}
	}

	private async void SelectLanguage(string language)
	{
		SelectedLanguage = language;
		await LoadPasswordGenerator(SelectedLanguage);
	}

	private async Task LoadPasswordGenerator(string language)
	{
		if (string.IsNullOrWhiteSpace(SelectedLanguage)) return;

		bestPasswordsComponent?.Clear();

		PreloadService.Show(SpinnerColor.Primary, "Loading the dictionary...");
		try
		{
			var generatorOptions = ConvertToOptions(Options);
			generatorOptions.File = await GetWordTreeFile(language);

			_generator = await Task.Run(() => PasswordFactory.Create(GeneratorType.Dictionary, generatorOptions));
		}
		finally
		{
			PreloadService.Hide();

			Options.HasChanges = false;
			StateHasChanged();
		}
	}

	private DictionaryPasswordGeneratorOptions ConvertToOptions(PasswordOptions options)
	{
		return new DictionaryPasswordGeneratorOptions()
			{
				Type = DictionaryType.WordTree,
				File = null!, // File is only needed when creating the generator
				NumberOfPasswords = 1,
				NumberOfWords = options.NumberOfWords,
				AverageWordLength = options.AverageWordLength,
				DepthLevel = options.DepthLevel,
				MinimumLength = options.MinimumLength,
				IncludeMarkSymbols = options.IncludeMarkSymbols,
				IncludeSeparatorSymbols = options.IncludeSeparatorSymbols,
				IncludeSetSymbols = options.IncludeSetSymbols,
				KeystrokeOrder = options.KeystrokeOrder,
				NumberOfNumbers = options.NumberOfNumbers,
				NumberOfSpecialCharacters = options.NumberOfSpecialCharacters,
				CustomSpecialCharacters = options.CustomSpecialCharacters.ToArray(),
			};
	}

	private async Task GenerateMultiplePasswords(MouseEventArgs args)
	{
		for (int i = 0; i < maxPasswordsCount + 1; i++)
			await GenerateNewPassword(args);
	}

	private async Task GenerateNewPassword(MouseEventArgs e)
	{
		if (!(optionsForm?.IsValid ?? false))
			ShowMessage(ToastType.Danger, "Configuration invalid, please review parameters.");
		else
		{
			var generationResult = await GenerateOrDefault();
			if (generationResult != null)
				bestPasswordsComponent?.Add(generationResult.Passwords[0]);
		}
	}

	private async Task<GenerationResult?> GenerateOrDefault()
	{
		if (_generator is null)
			throw new InvalidOperationException("Password factory is not initialized.");

		try
		{
			if (Options.HasChanges)
			{
				var generatorOptions = ConvertToOptions(Options);
				_generator.Configure(generatorOptions);
			}

			return await Task.Run(() => _generator.Generate());
		}
		catch (Exception ex)
		{
			await ShowException(ex);

			return null;
		}
	}
}
