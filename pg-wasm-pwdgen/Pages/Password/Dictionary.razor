@page "/password/dictionary"
@using PG.Entities.Files
@using PG.Logic.Passwords.Generators
@using PG.Logic.Passwords.Generators.Entities
@inject NavigationManager Navigation
@inject PG.Logic.Passwords.Generators.PasswordGeneratorFactory PasswordFactory

<h2>Dictionary based password generator</h2>

@if (!string.IsNullOrEmpty(lastPassword))
{
	<p role="status">Password: @lastPassword</p>

	@if (!string.IsNullOrEmpty(lastEntropy))
	{
		<p role="note">Entropy: @lastEntropy</p>
	}
}

<Dropdown Color="DropdownColor.Secondary" Direction="DropdownDirection.Dropend">
	<DropdownToggleButton>Dictionary</DropdownToggleButton>
	<DropdownMenu>
		<DropdownItem Type="DropdownItemType.Button" Active='@(selectedLanguage == "en-US")' @onclick='() => SelectLanguage("en-US")'>English (en-US)</DropdownItem>
		<DropdownItem Type="DropdownItemType.Button" Active='@(selectedLanguage == "es-ES")' @onclick='() => SelectLanguage("es-ES")'>Spanish (es-ES)</DropdownItem>
	</DropdownMenu>
</Dropdown>

<Button Color="ButtonColor.Primary" @onclick="GenerateNewPassword"><Icon Name="IconName.BracesAsterisk" /> Generate new password </Button>

<Modal @ref="modal" ShowCloseButton="false" CloseOnEscape="false" UseStaticBackdrop="true" />

@code {
	private Uri? _baseUri;
	private IPasswordGenerator? _generator = null;

	private Modal? modal = default;
	private string lastPassword = string.Empty;
	private string lastEntropy = string.Empty;
	private string selectedLanguage = "en-US";

	protected override async void OnInitialized()
	{
		_baseUri = new Uri(Navigation.BaseUri);
		if (PasswordFactory is null)
			throw new InvalidOperationException("Password generator factory is not initialized.");

		await InitializePasswordGenerator();
	}

	private async Task InitializePasswordGenerator()
	{
		await ShowLoadingModal();

		try
		{
			string wordTreePath = string.Empty;
			Stream file;
			try
			{
				wordTreePath = GetWordTreePath(selectedLanguage);
				file = await LoadFile(wordTreePath);
			}
			catch (Exception ex)
			{
				throw new InvalidOperationException($"Error loading dictionary file: \"{wordTreePath}\"", ex);
			}

			var options = new DictionaryPasswordGeneratorOptions()
				{
					Type = DictionaryType.WordTree,
					File = file,
					NumberOfPasswords = 1,
					NumberOfWords = 2,
					AverageWordLength = 7,
					MinimumLength = 12,
					DepthLevel = 4,
					KeystrokeOrder = KeystrokeOrder.AlternatingStroke,
					NumberOfNumbers = 1,
					NumberOfSpecialCharacters = 1,
					CustomSpecialCharacters = new char[] { '-', '.', '/' },
				};

			_generator = await Task.Run(() => PasswordFactory.Create(GeneratorType.Dictionary, options));			
		}
		finally
		{
			await HideLoadingModal();
		}
	}

	private string GetWordTreePath(string language)
	{
		if (_baseUri is null)
			throw new InvalidOperationException("Base URI not initialized");

		string relativePath = language switch
		{
			"es-ES" => "data/word_tree_esES.dat.gz",
			_ => "data/word_tree_enUS.dat.gz",
		};

		return new Uri(_baseUri, relativePath).ToString();
	}

	private async Task<Stream> LoadFile(string relativePath)
	{
		if (_baseUri is null)
			throw new InvalidOperationException("Base URI not initialized");

		var httpClient = new HttpClient();
		return await httpClient.GetStreamAsync(new Uri(_baseUri, relativeUri: relativePath));
	}

	private async Task ShowLoadingModal()
	{
		if (modal is null) return;

		var parameters = new Dictionary<string, object>()
		{
			{ "Message", "Loading dictionary, please wait..." }
		};

		await modal.ShowAsync<LoadingModal>(title: "Loading", parameters: parameters);

		await Task.Delay(200);
	}

	private void HideLoadingModal(object? state)
	{
		_ = HideLoadingModal();
	}

	private async Task HideLoadingModal()
	{
		if (modal is null) return;

		await modal.HideAsync();
	}

	private async void SelectLanguage(string language)
	{
		selectedLanguage = language;
		await InitializePasswordGenerator();

		StateHasChanged();
	}

	private void GenerateNewPassword(MouseEventArgs e)
	{
		GeneratePassword(null);
	}

	private void GeneratePassword(object? state)
	{
		if (_generator is null)
			throw new InvalidOperationException("Password factory is not initialized.");

		GenerationResult generationResult = _generator.Generate();
		double entropy = generationResult.AverageEntropy;
		string entropyText = entropy switch
		{
			_ when entropy < 1 => "(error)",
			_ when entropy < 28 => "Very weak",
			_ when entropy < 36 => "Weak",
			_ when entropy < 60 => "Reasonable",
			_ when entropy < 128 => "Strong",
			_ => "Very strong",
		};

		lastPassword = generationResult.Passwords[0];
		lastEntropy = $"{entropy:F2} bits ({entropyText})";
		StateHasChanged();
	}
}
