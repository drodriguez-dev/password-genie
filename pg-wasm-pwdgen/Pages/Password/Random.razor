@page "/password/random"
@using PG.Logic.Passwords.Generators
@using PG.Logic.Passwords.Generators.Entities
@using PG.Wasm.PasswordGenerator.Components.Passwords
@using PG.Wasm.PasswordGenerator.Components.Passwords.Models
@inject PG.Logic.Passwords.Generators.PasswordGeneratorFactory PasswordFactory
@inject IJSRuntime JSRuntime

<Toasts class="p-3" Messages="messages" AutoHide="true" Delay="1500" Placement="ToastsPlacement.TopRight" />

<div class="container-md">
	<div class="row">
		<div class="col">
			<h2>Random password generation</h2>
		</div>
	</div>

	<div class="row mb-3">
		<div class="col">
			<Accordion>
				<AccordionItem>
					<TitleTemplate>
						<Icon Name="IconName.Gear" Class="me-1" />Configuration
					</TitleTemplate>
					<Content>
						<RandomGeneratorOptions @ref="optionsForm" Options="@Options" />
					</Content>
				</AccordionItem>
			</Accordion>
		</div>
	</div>

	<div class="row g-1 mb-3">
		<div class="col text-nowrap">
			<Button Color="ButtonColor.Primary" @onclick="GenerateNewPassword"><Icon Name="IconName.BracesAsterisk" Class="me-1" />Generate new password</Button>
			<Button Color="ButtonColor.Primary" @onclick="GenerateMultiplePasswords">x@(maxPasswordsCount + 1)</Button>
		</div>
	</div>

	<div class="row mb-3">
		<div class="col">
			<BestPasswords @ref="bestPasswordsComponent" MaxPasswords="@(maxPasswordsCount)" />
		</div>
	</div>
</div>

@code {
	private IPasswordGenerator? _generator = default;
	private static readonly int maxPasswordsCount = 7;

	private RandomGeneratorOptions? optionsForm;
	private PasswordOptions options = new PasswordOptions();
	private PasswordOptions Options { get => options; set { options = value; StateHasChanged(); } }

	private BestPasswords? bestPasswordsComponent;

	private List<ToastMessage> messages = new List<ToastMessage>();

	protected async override void OnInitialized()
	{
		if (PasswordFactory is null)
			throw new InvalidOperationException("Password generator factory is not initialized.");

		await LoadPasswordGenerator();
	}

	private void ShowMessage(ToastType toastType, string message) => messages.Add(CreateToastMessage(toastType, message));

	private async Task ShowException(Exception ex)
	{
#if DEBUG
		await JSRuntime.InvokeVoidAsync("console.error", ex.ToString());
#endif

		ShowMessage(ToastType.Danger, ex.Message);
	}

	private ToastMessage CreateToastMessage(ToastType toastType, string message)
	{
		return new ToastMessage
			{
				Type = toastType,
				AutoHide = !(new[] { ToastType.Danger, ToastType.Warning }.Contains(toastType)),
				Message = message,
			};
	}

	private async Task LoadPasswordGenerator()
	{
		try
		{
			RandomPasswordGeneratorOptions generatorOptions = ConvertToOptions(Options);

			_generator = await Task.Run(() => PasswordFactory.Create(GeneratorType.Random, generatorOptions));
		}
		finally
		{
			Options.HasChanges = false;
			StateHasChanged();
		}
	}

	private RandomPasswordGeneratorOptions ConvertToOptions(PasswordOptions options)
	{
		return new RandomPasswordGeneratorOptions()
			{
				NumberOfPasswords = 1,
				NumberOfLetters = options.NumberOfLetters,
				NumberOfNumbers = options.NumberOfNumbers,
				NumberOfSpecialCharacters = options.NumberOfSpecialCharacters,
				IncludeMarkSymbols = options.IncludeMarkSymbols,
				IncludeSeparatorSymbols = options.IncludeSeparatorSymbols,
				IncludeSetSymbols = options.IncludeSetSymbols,
				CustomSpecialCharacters = options.CustomSpecialCharacters.ToArray(),
				KeystrokeOrder = options.KeystrokeOrder,
			};
	}

	private async Task GenerateMultiplePasswords(MouseEventArgs args)
	{
		for (int i = 0; i < maxPasswordsCount + 1; i++)
			await GenerateNewPassword(args);
	}

	private async Task GenerateNewPassword(MouseEventArgs e)
	{
		if (!(optionsForm?.IsValid ?? false))
			ShowMessage(ToastType.Danger, "Configuration invalid, please review parameters.");
		else
		{
			var generationResult = await GenerateOrDefault();
			if (generationResult != null)
				bestPasswordsComponent?.Add(generationResult.Passwords[0]);
		}
	}

	private async Task<GenerationResult?> GenerateOrDefault()
	{
		if (_generator is null)
			throw new InvalidOperationException("Password factory is not initialized.");

		try
		{
			if (Options.HasChanges)
			{
				var generatorOptions = ConvertToOptions(Options);
				_generator.Configure(generatorOptions);
			}

			return await Task.Run(() => _generator.Generate());
		}
		catch (Exception ex)
		{
			await ShowException(ex);

			return null;
		}
	}
}
