@page "/password/random"
@using PG.Logic.Passwords.Generators
@using PG.Logic.Passwords.Generators.Entities
@inject PG.Logic.Passwords.Generators.PasswordGeneratorFactory PasswordFactory

<h2>Random password generation</h2>

<div class="row mb-3">
	<div class="col-12">
		<Button Color="ButtonColor.Primary" @onclick="GenerateNewPassword"><Icon Name="IconName.BracesAsterisk" /> Generate new password </Button>
	</div>
</div>

@if (!string.IsNullOrEmpty(lastPassword))
{
	<div class="row mb-3">
		<div class="col-12">
			<p role="status">Password: @lastPassword</p>
		</div>
	</div>

	@if (!string.IsNullOrEmpty(lastEntropy))
	{
		<div class="row mb-3">
			<div class="col-12">
				<Tooltip Placement="TooltipPlacement.Left" Title="Entropy is a measure of the randomness of the password, indicating how unpredictable it is.">
					<h4>Entropy</h4>
				</Tooltip>
			</div>
		</div>

		<div class="row">
			<div class="col-12">
				<Tooltip Placement="TooltipPlacement.Left" Title="True entropy is calculated based on the number of possible combinations occurred during the password generation.">
					<p role="note" class="text-muted"><strong>True:</strong> @lastEntropy</p>
				</Tooltip>
				<Tooltip Placement="TooltipPlacement.Left" Title="Derived entropy is calculated based on the generated password, based on the different types of characters and the password length.">
					<p role="note" class="text-muted"><strong>Derived:</strong> @lastDerivedEntropy</p>
				</Tooltip>
			</div>
		</div>
	}
}

@code {
	private IPasswordGenerator? _generator = null;

	private string lastPassword = string.Empty;
	private string LastPassword { get => lastPassword; set { lastPassword = value; StateHasChanged(); } }

	private string lastEntropy = string.Empty;
	private string LastEntropy { get => lastEntropy; set { lastEntropy = value; StateHasChanged(); } }

	private string lastDerivedEntropy = string.Empty;
	private string LastDerivedEntropy { get => lastDerivedEntropy; set { lastDerivedEntropy = value; StateHasChanged(); } }

	protected async override void OnInitialized()
	{
		if (PasswordFactory is null)
			throw new InvalidOperationException("Password generator factory is not initialized.");

		var options = new RandomPasswordGeneratorOptions()
			{
				NumberOfPasswords = 1,
				NumberOfLetters = 8,
				NumberOfNumbers = 2,
				NumberOfSpecialCharacters = 1,
				IncludeMarkSymbols = true,
				IncludeSeparatorSymbols = true,
			};

		_generator = await Task.Run(() => PasswordFactory.Create(GeneratorType.Random, options));
	}

	private void GenerateNewPassword(MouseEventArgs e)
	{
		if (_generator is null)
			throw new InvalidOperationException("Password factory is not initialized.");

		GenerationResult generationResult = _generator.Generate();
		PasswordResult passwordResult = generationResult.Passwords[0];

		LastPassword = passwordResult.Password;
		LastEntropy = $"{passwordResult.TrueEntropy:F2} bits ({GetEntropyText(passwordResult.TrueStrength)})";
		LastDerivedEntropy = $"{passwordResult.DerivedEntropy:F2} bits ({GetEntropyText(passwordResult.DerivedStrength)})";
	}

	private string GetEntropyText(PasswordStrength strength)
	{
		return strength switch
		{
			PasswordStrength.VeryWeak => "Very weak",
			PasswordStrength.Weak => "Weak",
			PasswordStrength.Reasonable => "Medium",
			PasswordStrength.Strong => "Strong",
			PasswordStrength.VeryStrong => "Very strong",
			_ => "Unknown",
		};
	}
}
